package Package1;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class LinkedList1<key> implements Iterable<key> {
        private Node first;    // beginning of bag
        private int n;         // number of elements in bag

        // helper linked list class
        private class Node {
            private key item;
            private Node next;
        }

        /**
         * Initializes an empty bag.
         */
        public LinkedList1() {
            first = null;
            n = 0;
        }

        /**
         * Is this bag empty?
         * @return true if this bag is empty; false otherwise
         */
        public boolean isEmpty() {
            return first == null;
        }

        /**
         * Returns the number of items in this bag.
         * @return the number of items in this bag
         */
        public int size() {
            return n;
        }

        /**
         * Adds the item to this bag.
         * @param item the item to add to this bag
         */
        public void add(key item) {
            Node oldfirst = first;
            first = new Node();
            first.item = item;
            first.next = oldfirst;
            n++;
        }


        /**
         * Returns an iterator that iterates over the items in the bag.
         * @return
         */
        public java.util.Iterator<key> iterator()  {
            return (Iterator<key>) new LinkedIterator();
        }

        // an iterator over a linked list
        private class LinkedIterator {
            private Node current;

            // creates a new iterator
            public LinkedIterator() {
                current = first;
            }

            // is there a next item in the iterator?
            public boolean hasNext() {
                return current != null;
            }

            // this method is optional in Iterator interface
            public void remove() {
                throw new UnsupportedOperationException();
            }

            // returns the next item in the iterator (and advances the iterator)
            public key next() {
                if (!hasNext()) throw new NoSuchElementException();
                key item = current.item;
                current = current.next;
                return item;
            }
        }





}
